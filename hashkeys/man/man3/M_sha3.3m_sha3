." Text automatically generated by txt2man
.TH "M_sha3" "3m_sha3" "March 13, 2022" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." set smaller margin and spacing options
.ta T 0.2i
.nr IN 0.2i
." -----------------------------------------------------------------
.SH NAME
\fBM_sha3\fP(3fm) - [M_sha3::INTRO] a module implementing the SHA-3 hash function
.SH SYNOPSIS
\fBuse\fP M_sha3, \fIonly\fP : \fIsha3\fP
\fBuse\fP M_sha3, \fIonly\fP : \fIsha3_update\fP
\fBuse\fP M_sha3, \fIonly\fP : \fIsha3_state\fP
\fBuse\fP M_sha3, \fIonly\fP : \fIsha3_digest\fP
\fBuse\fP M_sha3, \fIonly\fP : \fIsha3_hexdigest\fP
\fBuse\fP M_sha3, \fIonly\fP : \fIsha3_file\fP
\fBuse\fP M_sha3, \fIonly\fP : \fIsha3_auto_test\fP
.fam T
.fi
.SH DESCRIPTION
This module implements the SHA-3 hash function, according to FIPS
PUB 202, SHA-3 Standard: Permutation-Based Hash and Extendable-Output
Functions, a NIST publication.
.PP
Originally based on routines from http://alcinoe.net/fortran.html
.PP
In this module, we focus on hashing strings of bytes (as opposed to
strings of bits whose length is not a multiple of 8). We also focus
on providing a fixed-length digest, rather than extendable output. For
us, bytes mean integers of kind 1.
.PP
There are two ways of using the module:
.RS
.IP \(bu 3
a functional form, in which the whole array of bytes to hash
is passed to a function, which returns an array of bytes:
.PP
.nf
.fam C
          digest = sha3( buffer, d )

.fam T
.fi
.RS
where d is an integer (default kind) that specifies the digest
length in bits (so that 'digest' should have a size of d/8)
.RE
.IP \(bu 3
a subroutine form, which is typically used like this:
.PP
.nf
.fam C
           type(sha3_state) :: S
           call sha3_update( S, buffer1, d )
           call sha3_update( S, buffer2 )
           \.\.\.
           call sha3_digest( S, digest )
.fam T
.fi
where you pass the data to hash little by little with
'\fIsha3_update\fP', and finish the process with '\fIsha3_digest\fP' (after
you which can start anew with the same state)
.RE
.PP
According to the standard, the digest size d may be one of 224, 256,
384, 512, which results in arrays of bytes of size 28, 32, 48 and
.IP 64. 4
These arrays of bytes can be converted into a hexadecimal string
of length 56, 64, 96 and 128 by calling the '\fIsha3_hexdigest\fP' function:
.PP
.nf
.fam C
        hd = sha3_hexdigest( digest )

.fam T
.fi
If the data to hash is a string, one may convert it to an array of
bytes or \fBinteger\fP(kind=int8) using the transfer intrinsic:
.PP
.nf
.fam C
      buffer = transfer( string, buffer )

.fam T
.fi
where \fBsize\fP(buffer) = \fBlen\fP(string)
.PP
The final routine exported by the module is \fIsha3_auto_test\fP(), which
hashes some test vectors, as found on:
.PP
.nf
.fam C
      http://www.di-mgt.com.au/sha_testvectors.html

.fam T
.fi
and some files in the directory 'test_vectors', for which
the digest was found using the Python implementation from
.PP
.nf
.fam C
      https://github.com/gvanas/KeccakCodePackage.

.fam T
.fi
.SH EXAMPLE
Sample program
.PP
.nf
.fam C
   program demo_M_sha3
   use M_sha3
   implicit none
   character(len=128) :: fname, arg
      call get_command_argument( 1, arg )
      if ( arg(1:1) .eq. '-' ) then
         if ( trim(arg) .eq. '-a' ) then
            call sha3_auto_test()
         else
            call get_command_argument( 2, fname )
           select case(trim(arg))
           case('-224'); call sha3_file( 224, trim(fname) )
           case('-256'); call sha3_file( 256, trim(fname) )
           case('-384'); call sha3_file( 384, trim(fname) )
           case('-512'); call sha3_file( 512, trim(fname) )
           case default
               print *,'usage: "sha3 -a" or "sha3 (-224|-256|-384|-512) fname"'
           end select
         endif
      else
         print *, 'usage: "sha3 -a" or "sha3 (-224|-256|-384|-512) fname"'
         print *, 'usage: "sha3 -a" or "sha3 (-224|-256|-384|-512) fname"'
      endif
.fam T
.fi
end program demo_M_sha3
