." Text automatically generated by txt2man
.TH "crc32_hash" "3m_hashkeys" "March 13, 2022" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." set smaller margin and spacing options
.ta T 0.2i
.nr IN 0.2i
." -----------------------------------------------------------------
.SH NAME
\fBcrc32_hash\fP(3f) - [M_hashkeys] CRC (Cyclic Redundancy Check)
(LICENSE:PD)

.SH SYNOPSIS
function \fBcrc32_hash\fP(a,continue) result (\fIcrc\fP)
.PP
.nf
.fam C
   class(*),intent(in)          :: anything(:)
   logical,intent(in),optional  :: continue
   integer(int64)               :: crc_out

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
This ia 32-bit version of the Cyclic Redundancy \fBCheck\fP(CRC).
This variant of CRC-32 uses LSB-first order, sets the initial CRC to
FFFFFFFF_int32, and complements the final CRC.
.PP
The result should be in accordance with ISO 3309, ITU-T V.42, Gzip
and PNG.
.SH OPTIONS
.TP
.B anything
input value to generate a CRC check for. May be a array
or scalar of numeric or string values of type CHARACTER,
int8, int16, int32, int64, real32, real64, real128
.TP
.B continue
optional parameter. If not present or .F. starts new
CRC sum. If .T. continues a CRC starting with last CRC
calculated.
.SH RETURNS
.TP
.B \fIcrc\fP
The calculated CRC sum. It is calculated as a 32-bit value
but returned as a 64-bit value, as Fortran does not
currently support unsigned integers.
.SH REFERENCES
Algorithms are described in "Computation of CRC" in Wikipedia.
Also see
.PP
.nf
.fam C
      https://en.wikipedia.org/wiki/Cyclic_redundancy_check

.fam T
.fi
.SH AUTHOR
This was derived from an unattributed example on http://rosettacode.org,
but has been modified.
.SH EXAMPLE
Sample program:
.PP
.nf
.fam C
   program demo_crc32_hash
   use,intrinsic :: ISO_FORTRAN_ENV, only : int64
   use M_hashkeys, only : crc32_hash
   implicit none
   integer :: i
   integer(int64) :: crc
   character(*), parameter :: s = "The quick brown fox jumps over the lazy dog"
      ! string
      crc=crc32_hash(s)
      print "(Z8)", crc
      print "(i0)", crc
      ! character array
      print "(i0)", crc32_hash([ &
              & 'T','h','e',' ',&
              & 'q','u','i','c','k',' ',&
              & 'b','r','o','w','n',' ',&
              & 'f','o','x',' '])
      print "(i0)", crc32_hash([ &
              & 'j','u','m','p','s',' ',&
              & 'o','v','e','r',' ',&
              & 't','h','e',' ',&
              & 'l','a','z','y',' ',&
              & 'd','o','g'],continue=.true.)
      ! numeric array
      print "(i0)", crc32_hash([(i,i=1,100)])
   end program demo_crc32_hash

.fam T
.fi
Expected output:
.PP
.nf
.fam C
   414FA339
   1095738169
   2293265890
   1095738169
   1783575711


