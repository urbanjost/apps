program prg_color
use,intrinsic :: iso_fortran_env, only : stderr=>ERROR_UNIT, stdin=>INPUT_UNIT, stdout=>OUTPUT_UNIT
use M_CLI2,                       only : set_args, sget, colors=>unnamed ! add command-line parser module
use M_io,                         only : get_env
use M_color,                      only : color_name2rgb
use M_color,                      only :
implicit none
character(len=:),allocatable :: help_text(:), version_text(:), background, foreground, cursorcolor, output
integer                      :: sz, ios, lun
   call setup()
   call set_args('-bg " " -fg " " -cr " "',help_text,version_text)
   background = sget('bg')
   foreground = sget('fg')
   cursorcolor = sget('cr')
   sz = size(colors)
   output=get_env('OTHERTTY')
   if(output == '')then
      lun=stdout
   else
      open(file=output,iostat=ios,newunit=lun)
      if(ios /= 0)lun=stdout
   endif
   if( sz.eq.0 ) call listallnames()
   if( sz.gt.0 ) background=trim(colors(1) )
   if( background.ne.'' ) write(lun,'(g0)',advance='no',iostat=ios)achar(27)//']11;'//background//achar(7)
   if( sz.gt.1 ) foreground=trim(colors(2) )
   if( foreground.ne.'' ) write(lun,'(g0)',advance='no',iostat=ios)achar(27)//']10;'//foreground//achar(7)
   if( sz.gt.2 ) cursorcolor=trim(colors(3) )
   if( cursorcolor.ne.'' ) write(lun,'(g0)',advance='no',iostat=ios)achar(27)//']12;'//cursorcolor//achar(7)
contains
!-----------------------------------------------------------------------------------------------------------------------------------
character(len=1) function paws()
integer :: iostat
   paws=' '
   write(*,'(a)',advance='no')'enter return to continue ...'
   read(*,'(a)',iostat=iostat)paws
end function paws
!-----------------------------------------------------------------------------------------------------------------------------------
subroutine listallnames()
    ! list colors known to colorname2rgb(3f) & corresponding RGB values
    character(len=20) :: name
    character(len=20) :: echoname
    real              :: red,green,blue
    integer           :: i,r,g,b
    character(len=1),parameter :: esc=achar(27),bel=achar(7)
    character(len=*),parameter :: gen='(*(g0))'
    i=1
    TRYALL: do 
       ! color names may be numeric strings from 1 to N
       write(name,'(i0)')i
       ! get the RGB values and English name of the color
       call color_name2rgb(name,red,green,blue,echoname)
       r=2.5*red
       g=2.5*green
       b=2.5*blue
       ! the last color name is "Unknown" so the loop should exit
       if(echoname == 'Unknown')exit TRYALL
       ! display the English name and RGB values for the name
       ! printf "\x1b[38;2;40;177;249mTRUECOLOR\x1b[0m\n"
       ! write(*,gen,advance='no') esc, '[38;5;', r, ';', g, ';', b, 'm_________', esc, '[0m'
       write(lun,'(*(g0))',advance='no',iostat=ios)achar(27)//']11;'//trim(echoname)//achar(7)
       write(lun,'(g0,g0,z0,z0,z0,g0)',advance='no',iostat=ios)achar(27),']10;#',255-r,255-g,255-b,achar(7)
       write(*,*),echoname,int([red,green,blue])
         select case(paws())
         case('t')          ; i=1
         case('b')          ; i=i-1
         case('n')          ; i=i+1
         case('q')          ; exit TRYALL
         case default       ; i=i+1
       end select
    enddo TRYALL
    !write(*,*)'Number of colors found is ',i-1
end subroutine listallnames
!-----------------------------------------------------------------------------------------------------------------------------------
subroutine setup()
$BLOCK VARIABLE --varname help_text --file kolor.1.man
NAME
    kolor(1) - [TERMINAL] set terminal background, foreground, and cursor color
    (LICENSE:PD)

SYNOPSIS

     kolor [background foreground cursorcolor] [-bg background][-fg foreground][-cr cursorcolor]

DESCRIPTION
    Set the background, foreground, and cursor color for terminals and
    terminal emulators that obey the ANSI in-band signaling control
    sequences

    If no options are supplied, steps through known color names changing the
    background kolor. Obeys "back", "top", "next", "quit". Defaults to "next".

    If you use something that filters stdout such as tmux(1) or screen(1)
    assign kolor(1) output to the initial stdout before starting the
    program by setting the environment variable OTHERTTY to the output
    device path. For example:

       export OTHERTTY=`tty`
       tmux

    Color values may be specified by name or hex value "#RRGGBB" or using
    RGB syntax, eg. rgb:0000/0000/0000 to rgb:ffff/ffff/ffff.

OPTIONS
    -bg CNAME  specify background color
    -fg CNAME  specify foreground color
    -cr CNAME  specify cursor color
    --help     display help and exit
    --version  display version information and exit

VARIABLES
    By default kolor(1) writes output to the current stdout file. The
    environment variable OTHERTTY can be used to change the default
    file. This is commonly required before starting programs that
    filter stdout, such as tmux(1) and screen(1).

       export OTHERTTY=$(realpath /proc/$$/fd/1)

EXAMPLE

   Sample usage:

    kolor gray30 white yellow
    kolor -bg brown -fg white -cr red
    kolor -bg '#ff00ff'
    kolor rgb:0000/8080/0000 rgb:ffff/ffff/ffff rgb:ffff/0000/0000

AUTHOR
    John S. Urban
LICENSE
    Public Domain
$BLOCK NULL --file kolor.1.man

$BLOCK VARIABLE --varname version_text
PRODUCT:        GPF (General Purpose Fortran) utilities and examples
PROGRAM:        kolor(1)
DESCRIPTION:    set terminal(1) window foreground, background, and cursor color
VERSION:        1.0, 20180408
AUTHOR:         John S. Urban
HOME PAGE:      http://www.urbanjost.altervista.org/index.html
$BLOCK
!-----------------------------------------------------------------------------------------------------------------------------------
end subroutine setup
end program prg_color
!-----------------------------------------------------------------------------------------------------------------------------------
!<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>-
!-----------------------------------------------------------------------------------------------------------------------------------
