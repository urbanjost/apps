$ifdef TESTPRG90
$!----------------------------------------------------------------------------------------------------------------------------------
$!
$! Program source
$!
program touch
use M_kracken, only : kracken,lget,sgets, IPvalue, sget
use M_time,    only : d2u
use M_system,  only : system_utime, system_perror
use M_time,    only : guessdate, fmtdate
implicit none
character(len=IPvalue),allocatable :: filenames(:)
integer                            :: dat(8)
integer                            :: i
integer                            :: ios
integer                            :: lun
logical                            :: verbose
character(len=4096)                :: errmsg
logical                            :: ex,od
logical                            :: lstat
integer                            :: times(2)
character(len=:),allocatable       :: date

! define command arguments, default values and crack command line
   call kracken('touch','-date -version .f. -help .f. -verbose .f.')
   call help_usage(lget('touch_help'))                ! if -help option is present, display help text and exit
   call help_version(lget('touch_version'))           ! if -version option is present, display version text and exit
   verbose=lget('touch_verbose')
   filenames=sgets('touch_oo')
   date=sget('touch_date')

   if(date.eq.'')then
      call date_and_time(values=dat)
   else
      call guessdate(date,dat)
      if(verbose)then
         write(*,*)'FOR '//date//' GOT '//trim(fmtdate(dat))
         write(*,*)'DAT ARRAY ',dat
      endif
   endif
   times(1)= d2u(dat)
   times(2)= times(1)

   do i=1,size(filenames)
      ! ex, od always become defined unless an error condition occurs.
      inquire(file=filenames(i), exist=ex, opened=od, iostat=ios)
      open(file=filenames(i),newunit=lun,iostat=ios,iomsg=errmsg)
      if(ios.ne.0)then
         !!write(*,*)'*touch* ERROR on '//trim(filenames(i))//':'//trim(errmsg)
      endif
      close(unit=lun,iostat=ios)
      if(.not.ex.and.verbose)then
         write(*,'(a)')trim(filenames(i))//' created'
      endif
      lstat=system_utime(filenames(i),times)
      if(lstat)then
         if(verbose)then
            write(*,'(a)')trim(filenames(i))//' updated'
         endif
      else
          call system_perror('*touch-*:'//filenames(i))
      endif
   enddo
   if(verbose)then
      write(*,'(a)')"That's all Folks!"
   endif
contains
$!----------------------------------------------------------------------------------------------------------------------------------
$!
$! create help text routine HELP_USAGE(3f) and source for man(1) page
$!
$BLOCK HELP -file touch-.1.man
NAME
   touch-(1f) - [FUNIX:FILESYSTEM] change file access and modify timestamps to current time, creating file if necessary
   (LICENSE:PD)

SYNOPSIS
   touch- [FILE... [ -date DATE]]|[ --help|--version|--verbose]

DESCRIPTION

   Make sure specified filenames exist (by creating them as empty
   files) and change file access time to current time or specified
   time.
OPTIONS
   -date      Change the file timestamps to the specified date instead of 
              the current time. Uses guessdate(3f) to read the date.
   --verbose  Display messages showing command progress
   --help     Display help text and exit
   --version  Display version information and exit
EXAMPLES   
  Sample commands

   touch- *.f90
   touch- * -date 2000-01-02 10:20:30
AUTHOR
   John S. Urban
LICENSE
   Public Domain
$BLOCK END
$!----------------------------------------------------------------------------------------------------------------------------------
$!
$! create routine HELP_VERSION(3f)
$!
$BLOCK VERSION
PRODUCT:        GPF library utilities and examples
PROGRAM:        touch-(1)
DESCRIPTION:    change file access timestamp to current time, creating file is necessary
VERSION:        1.0, 20180217
AUTHOR:         John S. Urban
$BLOCK END
end program touch
$!----------------------------------------------------------------------------------------------------------------------------------
$endif
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$ifdef PREP_TEST
   This begins the section that will be processed by prep. Typically it is called by

      prep PREP_TEST -system -i FILENAME

   if $SYSTEM commands are trusted

 UNIT TEST OF touch-

$SYSTEM mkdir -p tmp/
$SYSTEM goodbad touch- start -section 1

        Make sure test executable does not exist.
        Test executable should start with underscore and be unique or you could remove a command
$SYSTEM rm -f `which touch- 2>/dev/null||echo NOTTHERE`

        Build test program in standard location
$SYSTEM prep TESTPRG90 -i touch-.FF >tmp/__touch.F90
$SYSTEM ccall tmp/__touch.F90

        Execute test program

        See if new files are created

$SYSTEM rm -f __NOT1 __NOT2
$SYSTEM __touch __NOT1 __NOT2
$SYSTEM [ -f __NOT1 -a -f __NOT2 ] && goodbad touch- good -section 1|| goodbad touch- bad -section 1

        Remove test source
$SYSTEM rm tmp/__touch.F90 __NOT1 __NOT2
        Remove test executable
$SYSTEM rm -f `which __touch 2>/dev/null|| echo NOTTHERE`
$!==================================================================================================================================
$endif
