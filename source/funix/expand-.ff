$IFDEF TESTPRG90 ! ccall(1) defines TESTPRG90
!===================================================================================================================================
program expand
use M_kracken, only: kracken, lget, iget, sget
use M_strings, only: notabs, split
implicit none

$@(#) expand-(1f):filter removes tabs and trailing white space from files up to 1024 chars wide

character(len=1024)              :: in,out
integer                          :: ios          ! error flag from read
integer                          :: iout
integer                          :: i,ii
integer                          :: ierror=0
character(len=:),allocatable     :: array(:)     ! split name of filenames
integer                          :: iblanks
integer                          :: maxblanks
!-----------------------------------------------------------------------------------------------------------------------------------
   call kracken('expand','-help .F. -blanks -1 -version .F. ',ierror) ! define and crack command arguments and values 
   call help_usage(lget('expand_help'))                               ! check if -help was specified
   call help_version(lget('expand_version'))                          ! check if -version was specified
!-----------------------------------------------------------------------------------------------------------------------------------
   if(sget('expand_oo').ne.'')then                         ! see if filenames were listed on the command line
      call split(sget('expand_oo'),array)                  ! split the filenames into an array
   else                                                    ! default is to read from stdin, which the filename "-" designates
      array=['-']
   endif
   maxblanks=iget('expand_blanks')
!-----------------------------------------------------------------------------------------------------------------------------------
   ALLFILES: do i=1,size(array)                            ! loop through all the filenames
      if(array(i).eq.'-')then                              ! special filename designates stdin
         ii=5
      else                                                 ! open a regular file
         ii=20
         open(unit=ii,file=trim(array(i)),iostat=ios,status='old',form='formatted')
         if(ios.ne.0)then
            !call stderr('*expand-* failed to open:'//trim(array(i)))
            cycle ALLFILES
         endif
      endif
      iblanks=0
      ALLLINES: do                                         ! loop thru the file and call notabs(3f) on each line
         read(ii,"(a)",iostat=ios)in
         if(ios /= 0)then
            exit ALLLINES
         endif
         call notabs(in,out,iout)
         if(maxblanks.ge.0)then
            if(out(:iout).eq.'')then
               iblanks=iblanks+1
               if(iblanks.gt.maxblanks)then
                  cycle ALLLINES
               endif
            else
               iblanks=0
            endif
         endif
         write(*,"(a)")out(:iout)
      enddo ALLLINES
      close(unit=20,iostat=ios)
   enddo ALLFILES
!===================================================================================================================================
contains
$MESSAGE generating help_usage(3f)
!===================================================================================================================================
$BLOCK HELP -file expand-.1.man
NAME
       expand-(1f) - [FUNIX] convert tabs to spaces
       (LICENSE:PD)

SYNOPSIS
       expand- FILENAME(S) [ -blanks N]| --help| --version

DESCRIPTION
       Convert tabs in each FILE to spaces, writing to standard output.
       If no filename is specified standard input is read. Tab stops
       are assumed to be every eight (8) columns. Trailing spaces,
       carriage returns, and newlines are removed.

OPTIONS
       FILENAMES   files to expand tab characters in.
       -blanks     maximum number of adjacent blank lines to retain.
                   Default is -1, which is equivalent to unlimited.
       --help      display this help and exit
       --version   output version information and exit

EXAMPLES
       Sample commands:

        expand- < input.txt > output.txt
        expand- input.txt   > output.txt
$BLOCK END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$MESSAGE generating help_version(3f)
$BLOCK VERSION
PRODUCT:        GPF (General Purpose Fortran) utilities and examples
PROGRAM:        expand-(1f)
DESCRIPTION:    convert tabs to spaces
VERSION:        1.0, 2015-12-20
AUTHOR:         John S. Urban
REPORTING BUGS: http://www.urbanjost.altervista.org/
HOME PAGE:      http://www.urbanjost.altervista.org/index.html
LICENSE:        Public Domain. This is free software: you are free to change and redistribute it.
                There is NO WARRANTY, to the extent permitted by law.
$BLOCK END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$MESSAGE expand-(1) source being generated
end program expand
$ENDIF
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$IFDEF PREP_TEST
$MESSAGE expand-(1) unit test
$SYSTEM mkdir -p tmp/

         Initialiase test database to indicate a test section was begun,
         in case failure occurs before the end of the test

$SYSTEM goodbad expand- start -section 1 -library libGPF -filename `pwd`/M_strings.HTML

         if command not in path exit
$SYSTEM inpath expand-

         executable expand-(1) is assumed in standard location create a
         test file without tabs or extraneous line endings. This should
         be what the answer is ...

$OUTPUT tmp/__expand.txt
This is a test file for expand-
    This is a test file for expand-
        This is a test file for expand-                         This is a test file for expand-

                This is a test file for notab                        This is a test file for expand-
                        This is a test file for expand-
                                This is a test file for expand-
$OUTPUT

         Use unexpand(1) and unix2dos(1) to put tab characters and
         extraneous carriage returns into the test data

$SYSTEM unexpand -a  < tmp/__expand.txt |unix2dos > tmp/_tabs.txt

         expand-(1) should be able to remove the tabs and carriage
         returns added

$SYSTEM expand- < tmp/_tabs.txt >tmp/__expand_out.txt

        compare the output file to the expected output

$SYSTEM cmp tmp/__expand.txt tmp/__expand_out.txt && goodbad no-section 1 tabs good|| goodbad expand- bad -section 1

        clean up

$SYSTEM ls -ld tmp/__expand.txt tmp/_tabs.txt tmp/__expand_out.txt
$SYSTEM rm tmp/__expand.txt tmp/_tabs.txt tmp/__expand_out.txt
$ENDIF
$!==================================================================================================================================
$!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
$!==================================================================================================================================
