$ifdef TESTPRG90
!===================================================================================================================================
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()!
!===================================================================================================================================
! this is a utility program. It is typically built using ccall(1).
!-----------------------------------------------------------------------------------------------------------------------------------
program yes                                                         ! combine yes(1),repeat(1),watch(1),xargs(1). Start with yes(1)
use M_kracken, only : kracken, lget, sget, iget                  ! add command-line parser module
!!use M_kracken, only : show
implicit none
character(len=:),allocatable :: string
logical                      :: fmt
integer                      :: ios
integer                      :: repeat
integer                      :: i
integer                      :: istart
character(len=1024)          :: message
!-----------------------------------------------------------------------------------------------------------------------------------
   call kracken('yes','-help .F. -version .F. -repeat -1 -fmt .F.') ! define command arguments,default values and crack command line
!-----------------------------------------------------------------------------------------------------------------------------------
   !!call show('',.false.,0)
   call help_usage(lget('yes_help'))                                ! if -help option is present, display help text and exit
   call help_version(lget('yes_version'))                           ! if -version option is present, display version text and exit
!-----------------------------------------------------------------------------------------------------------------------------------
   string = trim(sget('yes_oo'))                                    ! get -oo STRING
   if(string.eq.' ')then                                            ! if string is blank use default
      string='y'
   endif
   fmt = lget('yes_fmt')                                            ! get -fmt
   repeat=iget('yes_repeat')
!-----------------------------------------------------------------------------------------------------------------------------------
   istart=0
   if(repeat.eq.-1)then
      INFINITE: do                                                  ! print string in a loop until an error occurs
         call printme()
      enddo INFINITE
   else
      REP: do i=1,repeat
         call printme()
      enddo REP
   endif
!-----------------------------------------------------------------------------------------------------------------------------------
contains
   subroutine printme  ! print as a string or print string as a format with line count as a parameter
         istart=istart+1
         if(fmt)then
            write(*,string,iostat=ios,iomsg=message) istart
         else
            write(*,'(a)',iostat=ios) trim(string)
         endif
         if(ios.ne.0)then
            write(*,*)'*yes* error:',trim(message)
            stop
         endif
   end subroutine printme
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK VERSION
PRODUCT:        GPF (General Purpose Fortran) utilities and examples
PROGRAM:        yes-(1)
DESCRIPTION:    output a string repeatedly until killed or limit is reached
VERSION:        1.0, 20150508
AUTHOR:         John S. Urban
REPORTING BUGS: http://www.urbanjost.altervista.org/
HOME PAGE:      http://www.urbanjost.altervista.org/index.html
LICENSE:        Public Domain. This is free software: you are free to change and redistribute it.
                There is NO WARRANTY, to the extent permitted by law.
$BLOCK END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK HELP -file yes-.1.man
NAME
    yes-(1f) - [FUNIX] output a string repeatedly until killed or limit is reached
    (LICENSE:PD)

SYNOPSIS
$!    yes- [STRING[ -repeat N][ -fmt]]|[ --help|--version]
    yes- [STRING[ -repeat N]]|[ --help| --version]

DESCRIPTION
    yes-(1) prints the command line arguments, separated by spaces and followed
    by a newline until the repeat count is reached or endlessly until it is
    killed. If no arguments are given, it prints "y" followed by a newline
    endlessly until killed. Upon a write error, yes-(1) exits with status "1".

OPTIONS
    -repeat N  specify number of times to display string
    --help     display this help and exit
    --version  output version information and exit
$!    -fmt       flag to use STRING as a Fortran format statement and to print
$!               the line count using the format. Enclose the entire format in
$!               single quotes and use two double-quote characters to place a
$!               double-quote into the format.

EXAMPLES
    Sample commands

       # repeat a command 20 times, pausing and clearing:
       yes-  date --repeat 20  |xargs -iXX  sh -c 'XX;sleep 2;clear'
$!       yes-  '(""file."",i3.3)' -fmt -repeat 199

REPORTING BUGS
    Report yes- bugs to <http://www.urbanjost.altervista.org/index.html>

SEE ALSO
    yes(1), repeat(1), xargs(1)
AUTHOR
   John S. Urban
LICENSE
   Public Domain
$BLOCK END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
end program yes
$endif
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$ifdef PREP_TEST
$!==================================================================================================================================
$!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
$!==================================================================================================================================
   This begins the section that will be processed by prep. Typically it is called by
   prep -system -html -i FILENAME
   if $SYSTEM commands are trusted

 UNIT TEST OF yes-

$SYSTEM mkdir -p tmp/
$SYSTEM goodbad yes- start -section 1

        Make sure test executable does not exist.
        Test executable should start with underscore and be unique or you could remove a command
$SYSTEM rm -f `which __yes 2>/dev/null||echo NOTTHERE`

        Build test program in standard location
$SYSTEM html2f90 < yes-.ff >tmp/__yes.F90
$SYSTEM ccall tmp/__yes.F90

        Execute test program
$SYSTEM [ `__yes -repeat 20|sum|sed -e 's/  */_/'` = 40541_1 ] && goodbad yes- good -section 1|| goodbad yes- bad -section 1
$SYSTEM [ `__yes this is a test|head -100|sum|sed -e 's/  */_/'` = 31080_2 ] && goodbad yes- good -section 1|| goodbad yes- bad -section 1

        Remove test source
$SYSTEM rm tmp/__yes.F90
        Remove test executable
$SYSTEM rm -f `which __yes 2>/dev/null|| echo NOTTHERE`
$!==================================================================================================================================
$!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
$!==================================================================================================================================
$ENDIF
