$IFDEF TESTPRG90
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK HELP -file paranoid.1.man
NAME
    paranoid(1f) - [DEVELOPER] call doubleprecision and real versions
    of paranoia(3f)
    (LICENSE:PD)
SYNOPSIS
    paranoid
DESCRIPTION
   This program and the routines it calls can be used to test various
   Fortran compiler options.

   The paranoid(1f) command is strictly for use by developers. This
   program and the sparanoi(3f) and dparanoi(3f) procedures all need
   recompiled with the compiler options being tested. Then the program
   is run and the resulting tests and their output are examined.

   The results require interpretation and an understanding of program
   internals.

   Because programs are often built with a variety of compilers and
   compiler options on a number of different platforms it is prudent to
   select options that choose operations that meet the double precision
   specification defined in the IEEE 754-1985 standard when available;
   but "failure" of the strict testing performed does not imply a flaw
   in the program.

   This permits developers to verify that the compiler and loader options
   selected while building a program and the system hardware currently
   being used reasonably perform floating point operations.

LICENSE
   Public Domain
$ENDBLOCK
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK VERSION
PROGRAM:        paranoid(1)
DESCRIPTION:    call doubleprecision and real versions of paranoia(3f)
VERSION:        1.0, 20150508
$ENDBLOCK
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$!
$! If not defined, set preprocessor variable ISO_FORTRAN_ENV
$! to indicate if compiler_version() and compiler_options() intrinsics are supported
$! default to assuming it is not supported
$!
$DEFINE TRUE=1
$DEFINE FALSE=0
$IFNDEF HAVE_ISO_FORTRAN_ENV
$DEFINE HAVE_ISO_FORTRAN_ENV=FALSE
$ENDIF
!===================================================================================================================================
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()=
!===================================================================================================================================
program test_paranoia
use M_kracken, only  : kracken,lget
use M_strings, only  : substitute
use M_time, only     : now
use M_system, only   : system_uname
!use M_messages, only : signs
implicit none

character(len=*),parameter   :: ident="@(#)paranoid(1f): call doubleprecision and real versions of paranoia(3f)"

character(len=:),allocatable :: options
integer,parameter            :: is=100
character(len=is)            :: string=' '
!-----------------------------------------------------------------------------------------------------------------------------------
   call kracken('paranoid','-help .F. -version .F.')     ! define command arguments,default values and crack command line
   call help_usage(lget('paranoid_help'))                ! if -help option is present, display help text and exit
   call help_version(lget('paranoid_version'))           ! if -version option is present, display version text and exit
!-----------------------------------------------------------------------------------------------------------------------------------
   print '(a)', repeat('=',80)                           ! print break line
   print '(a)', now()                                    ! print date and time

   call system_uname('s',string)                         ! print system information
   write(*,*)'sysname:  '//trim(string)
   
   call system_uname('r',string)
   write(*,*)'release:  '//trim(string)
   
   call system_uname('v',string)
   write(*,*)'version:  '//trim(string)
   
   call system_uname('n',string)
   write(*,*)'nodename: '//trim(string)
   
   call system_uname('m',string)
   write(*,*)'machine:  '//trim(string)

$IF HAVE_ISO_FORTRAN_ENV .eq. TRUE
   call print_version()
$ENDIF

   print '(a)', repeat('=',80)

!  call signs('SINGLE',6)
   write(*,"('*paranoia* single precision test')")
   call sparanoia()

!  call signs('DOUBLE',6)
   write(*,"('*paranoia* double precision test')")
   call dparanoia()

$IF HAVE_ISO_FORTRAN_ENV .eq. TRUE
contains

subroutine print_version()
use,intrinsic :: iso_fortran_env, only : compiler_version, compiler_options
use,intrinsic :: iso_fortran_env, only : stdin=>input_unit, stdout=>output_unit, stderr=>error_unit

use M_strings, only : split
character(len=:),allocatable :: options(:)
integer           :: i
integer           :: io=stdout
character(len=17) :: DATE="${DATE} ${TIME}"
   write(io,'("=================:: ")')
   !  COMPILER-RELATED COMPILATION INFORMATION
   write(io,'("Compiler version :: ",a)') COMPILER_VERSION()
   ! source_file_name  most compilers have predefined buildit macros such as ,__DATE__, __FILE__ that preprocessors expand
   write(io,'("Compilation Date :: ",a)') DATE !__DATE__
                                                      ! (hopefully) pretty-print compiler options
   call split(COMPILER_OPTIONS(),options)             ! parse compiler options on ' ' (likely delimiter)
   write(io,'("Compiler options ::")',advance='no')   ! only start new lines when a - begins the option
   do i=1,size(options)
      if(options(i)(1:1).eq.'-'.and.i.ne.1)then
         write(io,'(a)')
         write(io,'("                 :: ",a)',advance='no') trim(options(i))
      else
         write(io,'(" ",a)',advance='no') trim(options(i))
      endif
   enddo
   write(io,'(/,80("="))')
end subroutine print_version

$ENDIF
end program test_paranoia
!===================================================================================================================================
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()=
!===================================================================================================================================
$ENDIF
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK NULL
## DOWNLOAD and BUILD with make(1) ![gmake](docs/images/gnu.gif)
$!   If you have access to it, a paper showing how the
$!   program can be used to study compiler options
$!   can be found in the Westinghouse document (currently NOT public):
$!
$!      LTR-LIS-11-78, Rev.0
$!      Subject: Recommended ifort Compiler Options on Linux
$!      (C) 2011 WESTINGHOUSE ELECTRIC COMPANY LLC
$BLOCK
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
